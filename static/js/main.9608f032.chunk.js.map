{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ENDPOINT","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitReview","e","preventDefault","data","review","state","setState","status","axios","post","then","resp","console","log","class","rating","Number","catch","err","_this2","react_default","a","createElement","className","placeholder","required","onChange","target","value","type","onClick","role","build_default","starRatedColor","numberOfStars","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAIMA,EAAW,6CA8DFC,cA3Db,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,aAAe,SAACC,GACdA,EAAEC,iBACF,IAAMC,EAAO,CACXC,OAAQX,EAAKY,MAAMD,QAED,KAAhBD,EAAKC,QAAiC,OAAhBD,EAAKC,SAC7BX,EAAKa,SAAS,CAACC,OAAO,YACtBC,IAAMC,KAAKnB,EAAW,WAAYa,GACjCO,KAAK,SAAAC,GAAI,OAAIC,QAAQC,IAAIF,EAAKR,KAAKA,KAAKW,QAAUrB,EAAKa,SAAS,CAACC,OAAO,YAAcd,EAAKa,SAAS,CAACS,OAAOC,OAAOL,EAAKR,KAAKA,KAAKW,WAClIG,MAAM,SAAAC,GAAG,OAAIzB,EAAKa,SAAS,CAACC,OAAO,YAAcd,EAAKa,SAAS,CAACY,IAAIA,QAhBvEzB,EAAKY,MAAQ,CACXD,OAAQ,GACRW,OAAQ,EACRG,KAAK,EACLX,OAAQ,UANMd,wEAsBT,IAAA0B,EAAAvB,KACP,OACEwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,uBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,6EAGJH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAeC,YAAY,oBAAoBC,UAAQ,EAACC,SAAU,SAACzB,GAAD,OAAOkB,EAAKb,SAAS,CAACF,OAAOH,EAAE0B,OAAOC,YAE9HR,EAAAC,EAAAC,cAAA,UAAQO,KAAK,SAASN,UAAU,8BAA8BO,QAASlC,KAAKI,cAAeJ,KAAKS,MAAME,SAExGa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACZ3B,KAAKS,MAAMa,IACVE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKR,MAAM,qBAAqBiB,KAAK,SAArC,yBAKFX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEN,OAAQnB,KAAKS,MAAMU,OACnBkB,eAAe,OACfC,cAAe,EACfC,KAAK,oBAlDDC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.9608f032.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport StarRatings from 'react-star-ratings';\n\nconst ENDPOINT = \"https://cryptic-earth-56224.herokuapp.com/\"\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      review: \"\",\n      rating: 0,\n      err: false,\n      status: 'Submit',\n    }\n  }\n  submitReview = (e) => {\n    e.preventDefault()\n    const data = {\n      review: this.state.review\n    }\n    if (data.review !== '' && data.review !== null){\n      this.setState({status:\"Loading\"})\n      axios.post(ENDPOINT + \"predict/\", data)\n      .then(resp => console.log(resp.data.data.class) || this.setState({status:\"Submit\"}) || this.setState({rating:Number(resp.data.data.class)}))\n      .catch(err => this.setState({status:\"Submit\"}) || this.setState({err:err}))\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <div className=\"jumbotron jumbotron-fluid mt-5\">\n          <div className=\"container\">\n            <h1 className=\"display-4\">Rate Prediction App</h1>\n            <p className=\"lead\">This is my Machine Learning project, that predicts the rate of reviews.</p>\n          </div>\n        </div>\n        <form>\n          <div className=\"form-group\">\n            <textarea className=\"form-control\" placeholder=\"Write a review...\" required onChange={(e) => this.setState({review:e.target.value})}></textarea>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary float-right\" onClick={this.submitReview}>{this.state.status}</button>\n        </form>\n        <div className=\"d-flex justify-content-center m-5\">\n          {this.state.err ? (\n            <div className=\"text-center\">\n              <div class=\"alert alert-danger\" role=\"alert\">\n                Something went wrong\n              </div>\n            </div>\n          ) : (\n            <StarRatings\n              rating={this.state.rating}\n              starRatedColor=\"blue\"\n              numberOfStars={5}\n              name='rating'\n            />\n          )}\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}